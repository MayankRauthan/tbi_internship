
1. Variables and Data Types:
   - Variables: Used to store data values. Declared with `var`, `let`, or `const`.
   - Data Types: Primitive types include `number`, `string`, `boolean`, `null`, `undefined`, `symbol`. Objects include `object`, `array`, `function`.
   - Variable Declaration: `var` has function scope, `let` has block scope, `const` declares constants.

2. Operators:
   - Arithmetic Operators: Addition `+`, Subtraction `-`, Multiplication `*`, Division `/`, Modulus `%`.
   - Comparison Operators: `==`, `===` (strict equality), `!=`, `!==`, `>`, `<`, `>=`, `<=`.
   - Logical Operators: `&&` (AND), `||` (OR), `!` (NOT).
   - Assignment Operators: `=`, `+=`, `-=`, `*=`, `/=`, `%=`.

3. Control Flow:
   - Conditional Statements: `if`, `else if`, `else`.
   - Switch Statement: `switch`, `case`, `break`.
   - Loops: `for`, `while`, `do while`.
   - Control Statements: `break`, `continue`.

4. Functions:
   - Function Declaration: `function functionName(parameters) { ... }`.
   - Arrow Functions: `const functionName = (parameters) => { ... }`.
   - Return Statement: `return` exits the function and optionally returns a value.
   - Function Expressions: Assigning a function to a variable.

5. Arrays:
   - Declaration: `let arr = [element1, element2, ...]`.
   - Accessing Elements: `arr[index]`.
   - Array Methods: `push()`, `pop()`, `shift()`, `unshift()`, `splice()`, `slice()`, `forEach()`, `map()`, `filter()`, `reduce()`.
   - Array Destructuring: Extracting values from arrays into variables.

6. Objects:
   - Declaration: `let obj = { key1: value1, key2: value2, ... }`.
   - Accessing Properties: `obj.key` or `obj['key']`.
   - Object Methods: `Object.keys()`, `Object.values()`, `Object.entries()`.
   - Object Destructuring: Extracting values from objects into variables.

7. Scope and Closures:
   - Global Scope: Variables declared outside functions.
   - Function Scope: Variables declared inside functions.
   - Block Scope: Variables declared within blocks (with `let` and `const`).
   - Lexical Scope: Nested functions have access to variables in outer scopes.
   - Closure: Functions remember their lexical environment even when executed outside their lexical scope.

8. DOM Manipulation:
   - Selecting Elements: `document.getElementById()`, `document.querySelector()`.
   - Modifying Elements: `element.innerHTML`, `element.textContent`, `element.style.property`.
   - Creating and Appending Elements: `document.createElement()`, `element.appendChild()`.
   - Traversing the DOM: `parentNode`, `childNodes`, `nextSibling`, `previousSibling`.

9. Events:
   - Event Listeners: `element.addEventListener(event, callback)`.
   - Common Events: `click`, `mouseover`, `submit`, `keydown`.
   - Event Object: Contains information about the event.

10. Asynchronous JavaScript:
    - Callbacks: Functions passed as arguments, executed later.
    - Promises: Represent eventual completion of an asynchronous operation.
    - `async` / `await`: Keywords for handling promises in a more synchronous manner.
    - Promise.all(): Resolves when all promises are resolved.

11. Error Handling:
    - try-catch: Handle errors gracefully.
    - throw: Create custom errors.
    - Error Object: Contains information about the error.

12. Modules:
    - Exporting: `export`, `export default`.
    - Importing: `import`.
    - Named Exports and Default Exports: Different ways to export and import modules.

